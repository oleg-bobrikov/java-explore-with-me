create table if not exists users
(
    id    bigint generated by default as identity,
    email varchar(255) not null,
    name  varchar(255) not null,
    primary key (id),
    unique (email)
);

create table if not exists categories
(
    id   bigint generated by default as identity,
    name varchar(50) not null,
    primary key (id),
    unique (name)
);

create table if not exists locations
(
    id  bigint generated by default as identity,
    lat real not null,
    lon real not null,
    primary key (id)
);

create table if not exists events
(
    id                 bigint generated by default as identity,
    annotation         varchar(2000),
    created_om         timestamp,
    description        varchar(7000),
    event_date         timestamp,
    paid               boolean,
    participant_limit  integer,
    published_on       timestamp,
    request_moderation boolean,
    state              varchar(16),
    title              varchar(120),
    category_id        bigint,
    initiator_id       bigint,
    location_id        bigint not null,
    primary key (id),
    foreign key (category_id) references categories(id),
    foreign key (initiator_id) references users(id),
    foreign key (location_id) references locations(id)
);

create table if not exists participation_requests
(
    id           bigint generated by default as identity,
    created      timestamp,
    status       varchar(16),
    event_id     bigint,
    requester_id bigint,
    primary key (id),
    unique (event_id, requester_id),
    foreign key (event_id) references events,
    foreign key (requester_id) references users
);


create table if not exists compilations
(
    id     bigint generated by default as identity,
    pinned boolean     not null,
    title  varchar(50) not null,
    primary key (id)
);

create table if not exists event_compilations
(
    compilation_id bigint not null,
    event_id       bigint not null,
    primary key (compilation_id, event_id),
    foreign key (event_id) references events(id),
    foreign key (compilation_id) references compilations(id)
);



